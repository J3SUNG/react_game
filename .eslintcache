[{"/J3SUNG/react_game/src/components/Navigation.js":"1","/J3SUNG/react_game/src/routes/NumberBaseball/try.jsx":"2","/J3SUNG/react_game/src/routes/GuGuDan/GuGuDan.jsx":"3","/J3SUNG/react_game/src/routes/Home/Home.jsx":"4","/J3SUNG/react_game/src/index.jsx":"5","/J3SUNG/react_game/src/App.jsx":"6","/J3SUNG/react_game/src/routes/WordRelay/WordRelay.jsx":"7","/J3SUNG/react_game/src/routes/ResponseCheck/ResponseCheck.jsx":"8","/J3SUNG/react_game/src/routes/NumberBaseball/NumberBaseball.jsx":"9","/J3SUNG/react_game/src/routes/TicTacToe/TicTacToe.jsx":"10","/J3SUNG/react_game/src/routes/RSP/RSP.jsx":"11","/J3SUNG/react_game/src/routes/MineSearch/MineSearch.jsx":"12","/J3SUNG/react_game/src/routes/Lotto/Lotto.jsx":"13","/J3SUNG/react_game/src/routes/Lotto/Ball.jsx":"14","/J3SUNG/react_game/src/routes/TicTacToe/Table.jsx":"15","/J3SUNG/react_game/src/routes/TicTacToe/Tr.jsx":"16","/J3SUNG/react_game/src/routes/TicTacToe/Td.jsx":"17","/J3SUNG/react_game/src/routes/MineSearch/Table.jsx":"18","/J3SUNG/react_game/src/routes/MineSearch/Form.jsx":"19","/J3SUNG/react_game/src/routes/MineSearch/Tr.jsx":"20","/J3SUNG/react_game/src/routes/MineSearch/Td.jsx":"21"},{"size":590,"mtime":1608260766140,"results":"22","hashOfConfig":"23"},{"size":273,"mtime":1608261154480,"results":"24","hashOfConfig":"23"},{"size":1088,"mtime":1608256267450,"results":"25","hashOfConfig":"23"},{"size":180,"mtime":1608260933530,"results":"26","hashOfConfig":"23"},{"size":171,"mtime":1608256267450,"results":"27","hashOfConfig":"23"},{"size":1293,"mtime":1608262330660,"results":"28","hashOfConfig":"23"},{"size":1027,"mtime":1608256267480,"results":"29","hashOfConfig":"23"},{"size":1558,"mtime":1608256267480,"results":"30","hashOfConfig":"23"},{"size":2292,"mtime":1608261211670,"results":"31","hashOfConfig":"23"},{"size":2872,"mtime":1608259784800,"results":"32","hashOfConfig":"23"},{"size":2297,"mtime":1608262425270,"results":"33","hashOfConfig":"23"},{"size":7087,"mtime":1608262240310,"results":"34","hashOfConfig":"23"},{"size":1849,"mtime":1608262326600,"results":"35","hashOfConfig":"23"},{"size":482,"mtime":1608256267450,"results":"36","hashOfConfig":"23"},{"size":468,"mtime":1608260746050,"results":"37","hashOfConfig":"23"},{"size":485,"mtime":1608256267480,"results":"38","hashOfConfig":"23"},{"size":464,"mtime":1608262326640,"results":"39","hashOfConfig":"23"},{"size":394,"mtime":1608261777070,"results":"40","hashOfConfig":"23"},{"size":1235,"mtime":1608260746050,"results":"41","hashOfConfig":"23"},{"size":433,"mtime":1608260746050,"results":"42","hashOfConfig":"23"},{"size":3039,"mtime":1608262672470,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"ctznl4",{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"46"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"46"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"46"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"46"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"46"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"46"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93"},"/J3SUNG/react_game/src/components/Navigation.js",[],["94","95"],"/J3SUNG/react_game/src/routes/NumberBaseball/try.jsx",["96"],"import React, { PureComponent, memo } from \"react\";\r\n\r\nconst Try = memo(({ tryInfo }) => {\r\n  return (\r\n    <div className=\"try\">\r\n      <li>\r\n        <div>{tryInfo.try}</div>\r\n        <div>{tryInfo.result}</div>\r\n      </li>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default Try;\r\n","/J3SUNG/react_game/src/routes/GuGuDan/GuGuDan.jsx",[],"/J3SUNG/react_game/src/routes/Home/Home.jsx",[],"/J3SUNG/react_game/src/index.jsx",[],"/J3SUNG/react_game/src/App.jsx",[],"/J3SUNG/react_game/src/routes/WordRelay/WordRelay.jsx",[],"/J3SUNG/react_game/src/routes/ResponseCheck/ResponseCheck.jsx",[],"/J3SUNG/react_game/src/routes/NumberBaseball/NumberBaseball.jsx",[],"/J3SUNG/react_game/src/routes/TicTacToe/TicTacToe.jsx",["97","98"],"import React, { useEffect, useReducer, useCallback } from \"react\";\nimport Table from \"./Table\";\nimport \"./TicTacToe.css\";\n\nconst initialState = {\n  winner: \"\",\n  turn: \"O\",\n  tableData: [\n    [\"\", \"\", \"\"],\n    [\"\", \"\", \"\"],\n    [\"\", \"\", \"\"],\n  ],\n  recentCell: [-1, -1],\n};\n\nexport const SET_WINNER = \"SET_WINNER\";\nexport const CLICK_CELL = \"CLICK_CELL\";\nexport const CHANGE_TURN = \"CHANGE_TURN\";\nexport const RESET_GAME = \"RESET_GAME\";\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case SET_WINNER:\n      return {\n        ...state,\n        winner: action.winner,\n      };\n    case CLICK_CELL: {\n      const tableData = [...state.tableData];\n      tableData[action.row] = [...tableData[action.row]];\n      tableData[action.row][action.cell] = state.turn;\n      return {\n        ...state,\n        tableData,\n        recentCell: [action.row, action.cell],\n      };\n    }\n    case CHANGE_TURN: {\n      return {\n        ...state,\n        turn: state.turn === \"O\" ? \"X\" : \"O\",\n      };\n    }\n    case RESET_GAME: {\n      return {\n        ...state,\n        tableData: [\n          [\"\", \"\", \"\"],\n          [\"\", \"\", \"\"],\n          [\"\", \"\", \"\"],\n        ],\n        recentCell: [-1, -1],\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nconst TicTacToe = () => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const { tableData, turn, winner, recentCell } = state;\n  const onClickTable = useCallback(() => {\n    dispatch({ type: SET_WINNER, winner: \"O\" });\n  }, []);\n\n  useEffect(() => {\n    const [row, cell] = recentCell;\n    if (row < 0) {\n      return;\n    }\n    let win = false;\n    if (\n      tableData[row][0] === turn &&\n      tableData[row][1] === turn &&\n      tableData[row][2] === turn\n    ) {\n      win = true;\n    }\n    if (\n      tableData[0][cell] === turn &&\n      tableData[1][cell] === turn &&\n      tableData[2][cell] === turn\n    ) {\n      win = true;\n    }\n    if (\n      tableData[0][0] === turn &&\n      tableData[1][1] === turn &&\n      tableData[2][2] === turn\n    ) {\n      win = true;\n    }\n    if (\n      tableData[0][2] === turn &&\n      tableData[1][1] === turn &&\n      tableData[2][0] === turn\n    ) {\n      win = true;\n    }\n    if (win) {\n      dispatch({ type: SET_WINNER, winner: turn });\n      dispatch({ type: RESET_GAME });\n    } else {\n      let all = true;\n      tableData.forEach((row) => {\n        row.forEach((cell) => {\n          if (!cell) {\n            all = false;\n          }\n        });\n      });\n      if (all) {\n        dispatch({ type: RESET_GAME });\n      } else {\n        dispatch({ type: CHANGE_TURN });\n      }\n    }\n  }, [recentCell]);\n\n  return (\n    <>\n      <Table\n        onClick={onClickTable}\n        tableData={state.tableData}\n        dispatch={dispatch}\n      />\n      {state.winner && <div>{state.winner}님의 승리</div>}\n    </>\n  );\n};\n\nexport default TicTacToe;\n","/J3SUNG/react_game/src/routes/RSP/RSP.jsx",["99"],"import React, { useState, useRef, useEffect } from \"react\";\nimport \"./RSP.css\";\n\nconst rspCoords = {\n  바위: \"0\",\n  가위: \"-142px\",\n  보: \"-284px\",\n};\n\nconst scores = {\n  가위: 1,\n  바위: 0,\n  보: -1,\n};\n\nconst computerChoice = (imgCoord) => {\n  return Object.entries(rspCoords).find(function (v) {\n    return v[1] === imgCoord;\n  })[0];\n};\n\nconst RSP = () => {\n  const [result, setResult] = useState(\"\");\n  const [imgCoord, setImgCoord] = useState(rspCoords.바위);\n  const [score, setScore] = useState(0);\n  const interval = useRef();\n\n  useEffect(() => {\n    interval.current = setInterval(changeHand, 100);\n    return () => {\n      clearInterval(interval.current);\n    };\n  }, [imgCoord]);\n\n  const changeHand = () => {\n    if (imgCoord === rspCoords.바위) {\n      setImgCoord(rspCoords.가위);\n    } else if (imgCoord === rspCoords.가위) {\n      setImgCoord(rspCoords.보);\n    } else if (imgCoord === rspCoords.보) {\n      setImgCoord(rspCoords.바위);\n    }\n  };\n\n  const onClickBtn = (choice) => () => {\n    if (interval.current) {\n      clearInterval(interval.current);\n      interval.current = null;\n      const myScore = scores[choice];\n      const cpuScore = scores[computerChoice(imgCoord)];\n      const diff = myScore - cpuScore;\n      if (diff === 0) {\n        setResult(\"비겼습니다!\");\n      } else if ([-1, 2].includes(diff)) {\n        setResult(\"이겼습니다!\");\n        setScore((prevScore) => prevScore + 1);\n      } else {\n        setResult(\"졌습니다!\");\n        setScore((prevScore) => prevScore - 1);\n      }\n      setTimeout(() => {\n        interval.current = setInterval(changeHand, 100);\n      }, 1000);\n    }\n  };\n\n  return (\n    <>\n      <div\n        id=\"computer\"\n        style={{\n          background: `url(https://en.pimg.jp/023/182/267/1/23182267.jpg) ${imgCoord} 0`,\n        }}\n      />\n      <div>\n        <button id=\"rock\" className=\"btn\" onClick={onClickBtn(\"바위\")}>\n          바위\n        </button>\n        <button id=\"scissor\" className=\"btn\" onClick={onClickBtn(\"가위\")}>\n          가위\n        </button>\n        <button id=\"paper\" className=\"btn\" onClick={onClickBtn(\"보\")}>\n          보\n        </button>\n      </div>\n      <div>{result}</div>\n      <div>현재 {score}점</div>\n    </>\n  );\n};\nexport default RSP;\n","/J3SUNG/react_game/src/routes/MineSearch/MineSearch.jsx",[],"/J3SUNG/react_game/src/routes/Lotto/Lotto.jsx",["100","101"],"import React, {\n  useState,\n  useRef,\n  useEffect,\n  useMemo,\n  useCallback,\n} from \"react\";\nimport Ball from \"./Ball\";\nimport \"./Lotto.css\";\n\nfunction getWinNumbers() {\n  const candiate = Array(45)\n    .fill()\n    .map((v, i) => i + 1);\n  const shuffle = [];\n  while (candiate.length > 0) {\n    shuffle.push(\n      candiate.splice(Math.floor(Math.random() * candiate.length), 1)[0]\n    );\n  }\n  const bonusNumber = shuffle[shuffle.length - 1];\n  const winNumbers = shuffle.slice(0, 6).sort((p, c) => p - c);\n  return [...winNumbers, bonusNumber];\n}\n\nconst Lotto_hooks = () => {\n  const lottoNumbers = useMemo(() => getWinNumbers(), []);\n  const [winNumbers, setWinNumbers] = useState(lottoNumbers);\n  const [winBalls, setWinBalls] = useState([]);\n  const [bonus, setBonus] = useState(null);\n  const [redo, setRedo] = useState(false);\n  const timeouts = useRef([]);\n\n  useEffect(() => {\n    for (let i = 0; i < winNumbers.length - 1; ++i) {\n      timeouts.current[i] = setTimeout(() => {\n        setWinBalls((prevBalls) => [...prevBalls, winNumbers[i]]);\n      }, (i + 1) * 1000);\n    }\n    timeouts.current[6] = setTimeout(() => {\n      setBonus(winNumbers[6]);\n      setRedo(true);\n    }, 7000);\n    return () => {\n      timeouts.current.forEach((v) => {\n        clearTimeout(v);\n      });\n    };\n  }, [timeouts.current]);\n\n  const onClickRedo = useCallback(() => {\n    setWinNumbers(getWinNumbers());\n    setWinBalls([]);\n    setBonus(null);\n    setRedo(false);\n    timeouts.current = [];\n  });\n\n  return (\n    <>\n      <div>당첨 숫자</div>\n      <div id=\"결과창\">\n        {winBalls.map((v) => (\n          <Ball key={v} number={v} />\n        ))}\n      </div>\n      <div>보너스!</div>\n      {bonus && <Ball number={bonus} />}\n      {redo && <button onClick={onClickRedo}>한번더!</button>}\n    </>\n  );\n};\n\nexport default Lotto_hooks;\n","/J3SUNG/react_game/src/routes/Lotto/Ball.jsx",[],"/J3SUNG/react_game/src/routes/TicTacToe/Table.jsx",[],"/J3SUNG/react_game/src/routes/TicTacToe/Tr.jsx",[],"/J3SUNG/react_game/src/routes/TicTacToe/Td.jsx",["102"],"import React, { useCallback, memo } from \"react\";\r\nimport { CLICK_CELL } from \"./TicTacToe\";\r\n\r\nconst Td = memo(({ rowIndex, cellIndex, dispatch, cellData }) => {\r\n  const onClickTd = useCallback(() => {\r\n    if (cellData) {\r\n      return;\r\n    }\r\n    dispatch({ type: CLICK_CELL, row: rowIndex, cell: cellIndex });\r\n  }, [cellData]);\r\n\r\n  return (\r\n    <td className=\"tictactoe\" onClick={onClickTd}>\r\n      {cellData}\r\n    </td>\r\n  );\r\n});\r\n\r\nexport default Td;\r\n","/J3SUNG/react_game/src/routes/MineSearch/Table.jsx",[],"/J3SUNG/react_game/src/routes/MineSearch/Form.jsx",["103"],"import React, { useState, useCallback, useContext, memo } from \"react\";\r\nimport { START_GAME, TableContext } from \"./MineSearch\";\r\n\r\nconst Form = memo(() => {\r\n  const [row, setRow] = useState(10);\r\n  const [cell, setCell] = useState(10);\r\n  const [mine, setMine] = useState(20);\r\n  const { dispatch } = useContext(TableContext);\r\n\r\n  const onChangeRow = useCallback((e) => {\r\n    setRow(e.target.value);\r\n  }, []);\r\n\r\n  const onChangeCell = useCallback((e) => {\r\n    setCell(e.target.value);\r\n  }, []);\r\n\r\n  const onChangeMine = useCallback((e) => {\r\n    setMine(e.target.value);\r\n  }, []);\r\n\r\n  const onClickBtn = useCallback(() => {\r\n    dispatch({ type: START_GAME, row, cell, mine });\r\n  }, [row, cell, mine]);\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        type=\"number\"\r\n        placeholder=\"세로\"\r\n        value={row}\r\n        onChange={onChangeRow}\r\n      />\r\n      <input\r\n        type=\"number\"\r\n        placeholder=\"가로\"\r\n        value={cell}\r\n        onChange={onChangeCell}\r\n      />\r\n      <input\r\n        type=\"number\"\r\n        placeholder=\"지뢰\"\r\n        value={mine}\r\n        onChange={onChangeMine}\r\n      />\r\n      <button onClick={onClickBtn}>시작</button>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default Form;\r\n","/J3SUNG/react_game/src/routes/MineSearch/Tr.jsx",[],"/J3SUNG/react_game/src/routes/MineSearch/Td.jsx",["104","105","106","107","108"],"import React, { useContext, useCallback, useMemo, memo } from \"react\";\r\nimport {\r\n  CLICK_MINE,\r\n  CODE,\r\n  FLAG_CELL,\r\n  NORMALIZE_CELL,\r\n  OPEN_CELL,\r\n  QUESTION_CELL,\r\n  TableContext,\r\n} from \"./MineSearch\";\r\n\r\nconst getTdStyle = (code) => {\r\n  switch (code) {\r\n    case CODE.NORMAL:\r\n    case CODE.MINE:\r\n      return {\r\n        background: \"#666\",\r\n      };\r\n    case CODE.CLICKED_MINE:\r\n    case CODE.OPENED:\r\n      return {\r\n        background: \"white\",\r\n      };\r\n    case CODE.QUESTION_MINE:\r\n    case CODE.QUESTION:\r\n      return {\r\n        background: \"yellow\",\r\n      };\r\n    case CODE.FLAG_MINE:\r\n    case CODE.FLAG:\r\n      return {\r\n        background: \"red\",\r\n      };\r\n    default:\r\n      return {\r\n        background: \"white\",\r\n      };\r\n  }\r\n};\r\n\r\nconst getTdText = (code) => {\r\n  switch (code) {\r\n    case CODE.NORMAL:\r\n      return \"\";\r\n    case CODE.MINE:\r\n      return \"X\";\r\n    case CODE.CLICKED_MINE:\r\n      return \"펑\";\r\n    case CODE.FLAG_MINE:\r\n    case CODE.FLAG:\r\n      return \"!\";\r\n    case CODE.QUESTION_MINE:\r\n    case CODE.QUESTION:\r\n      return \"?\";\r\n    default:\r\n      return code || \"\";\r\n  }\r\n};\r\n\r\nconst Td = memo(({ rowIndex, cellIndex }) => {\r\n  const { tableData, dispatch, halted } = useContext(TableContext);\r\n\r\n  const onClickTd = useCallback(() => {\r\n    if (halted) {\r\n      return;\r\n    }\r\n    switch (tableData[rowIndex][cellIndex]) {\r\n      case CODE.OPENED:\r\n      case CODE.FLAG_MINE:\r\n      case CODE.FLAG:\r\n      case CODE.QUESTION_MINE:\r\n      case CODE.QUESTION:\r\n        return;\r\n      case CODE.NORMAL:\r\n        dispatch({ type: OPEN_CELL, row: rowIndex, cell: cellIndex });\r\n        return;\r\n      case CODE.MINE:\r\n        dispatch({ type: CLICK_MINE, row: rowIndex, cell: cellIndex });\r\n        return;\r\n      default:\r\n        return;\r\n    }\r\n  }, [tableData[rowIndex][cellIndex], halted]);\r\n\r\n  const onRightClickTd = useCallback(\r\n    (e) => {\r\n      e.preventDefault();\r\n      if (halted) {\r\n        return;\r\n      }\r\n      switch (tableData[rowIndex][cellIndex]) {\r\n        case CODE.NORMAL:\r\n        case CODE.MINE:\r\n          dispatch({ type: FLAG_CELL, row: rowIndex, cell: cellIndex });\r\n          return;\r\n        case CODE.FLAG_MINE:\r\n        case CODE.FLAG:\r\n          dispatch({ type: QUESTION_CELL, row: rowIndex, cell: cellIndex });\r\n          return;\r\n        case CODE.QUESTION_MINE:\r\n        case CODE.QUESTION:\r\n          dispatch({ type: NORMALIZE_CELL, row: rowIndex, cell: cellIndex });\r\n          return;\r\n        default:\r\n          return;\r\n      }\r\n    },\r\n    [tableData[rowIndex][cellIndex], halted]\r\n  );\r\n\r\n  return (\r\n    <RealTd\r\n      onClickTd={onClickTd}\r\n      onRightClickTd={onRightClickTd}\r\n      data={tableData[rowIndex][cellIndex]}\r\n    />\r\n  );\r\n});\r\n\r\nconst RealTd = memo(({ onClickTd, onRightClickTd, data }) => {\r\n  return (\r\n    <td\r\n      className=\"Mine\"\r\n      style={getTdStyle(data)}\r\n      onClick={onClickTd}\r\n      onContextMenu={onRightClickTd}\r\n    >\r\n      {getTdText(data)}\r\n    </td>\r\n  );\r\n});\r\n\r\nexport default Td;\r\n",{"ruleId":"109","replacedBy":"110"},{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","severity":1,"message":"114","line":1,"column":17,"nodeType":"115","messageId":"116","endLine":1,"endColumn":30},{"ruleId":"113","severity":1,"message":"117","line":62,"column":28,"nodeType":"115","messageId":"116","endLine":62,"endColumn":34},{"ruleId":"118","severity":1,"message":"119","line":119,"column":6,"nodeType":"120","endLine":119,"endColumn":18,"suggestions":"121"},{"ruleId":"118","severity":1,"message":"122","line":33,"column":6,"nodeType":"120","endLine":33,"endColumn":16,"suggestions":"123"},{"ruleId":"118","severity":1,"message":"124","line":49,"column":6,"nodeType":"120","endLine":49,"endColumn":24,"suggestions":"125"},{"ruleId":"118","severity":1,"message":"126","line":51,"column":23,"nodeType":"115","endLine":51,"endColumn":34},{"ruleId":"118","severity":1,"message":"127","line":10,"column":6,"nodeType":"120","endLine":10,"endColumn":16,"suggestions":"128"},{"ruleId":"118","severity":1,"message":"129","line":24,"column":6,"nodeType":"120","endLine":24,"endColumn":23,"suggestions":"130"},{"ruleId":"113","severity":1,"message":"131","line":1,"column":42,"nodeType":"115","messageId":"116","endLine":1,"endColumn":49},{"ruleId":"118","severity":1,"message":"132","line":83,"column":6,"nodeType":"120","endLine":83,"endColumn":46,"suggestions":"133"},{"ruleId":"118","severity":1,"message":"134","line":83,"column":7,"nodeType":"135","endLine":83,"endColumn":37},{"ruleId":"118","severity":1,"message":"132","line":108,"column":5,"nodeType":"120","endLine":108,"endColumn":45,"suggestions":"136"},{"ruleId":"118","severity":1,"message":"134","line":108,"column":6,"nodeType":"135","endLine":108,"endColumn":36},"no-native-reassign",["137"],"no-negated-in-lhs",["138"],"no-unused-vars","'PureComponent' is defined but never used.","Identifier","unusedVar","'winner' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'tableData' and 'turn'. Either include them or remove the dependency array.","ArrayExpression",["139"],"React Hook useEffect has a missing dependency: 'changeHand'. Either include it or remove the dependency array.",["140"],"React Hook useEffect has a missing dependency: 'winNumbers'. Either include it or remove the dependency array. Mutable values like 'timeouts.current' aren't valid dependencies because mutating them doesn't re-render the component.",["141"],"React Hook useCallback does nothing when called with only one argument. Did you forget to pass an array of dependencies?","React Hook useCallback has missing dependencies: 'cellIndex', 'dispatch', and 'rowIndex'. Either include them or remove the dependency array. If 'dispatch' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["142"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["143"],"'useMemo' is defined but never used.","React Hook useCallback has missing dependencies: 'cellIndex', 'dispatch', 'rowIndex', and 'tableData'. Either include them or remove the dependency array.",["144"],"React Hook useCallback has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","MemberExpression",["145"],"no-global-assign","no-unsafe-negation",{"desc":"146","fix":"147"},{"desc":"148","fix":"149"},{"desc":"150","fix":"151"},{"desc":"152","fix":"153"},{"desc":"154","fix":"155"},{"desc":"156","fix":"157"},{"desc":"156","fix":"158"},"Update the dependencies array to be: [recentCell, tableData, turn]",{"range":"159","text":"160"},"Update the dependencies array to be: [changeHand, imgCoord]",{"range":"161","text":"162"},"Update the dependencies array to be: [winNumbers]",{"range":"163","text":"164"},"Update the dependencies array to be: [cellData, cellIndex, dispatch, rowIndex]",{"range":"165","text":"166"},"Update the dependencies array to be: [dispatch, row, cell, mine]",{"range":"167","text":"168"},"Update the dependencies array to be: [cellIndex, dispatch, halted, rowIndex, tableData]",{"range":"169","text":"170"},{"range":"171","text":"170"},[2615,2627],"[recentCell, tableData, turn]",[668,678],"[changeHand, imgCoord]",[1304,1322],"[winNumbers]",[322,332],"[cellData, cellIndex, dispatch, rowIndex]",[696,713],"[dispatch, row, cell, mine]",[1808,1848],"[cellIndex, dispatch, halted, rowIndex, tableData]",[2546,2586]]